#########################################################################
# Use this file to answer Review Exercises from the Big Java textbook
#########################################################################


R13.1 Terms

a. recursion n is a coding method that uses a function to call itself repeatedly solve a problem. Each recursive call typically breaks down the problem into smaller and smaller pieces, eventually reaching a base case which stops further recursion.
b. Iteration is another method to execute a block of code repeatedly, often controlled by a loop construct like "for, while, or do-while". It's used to traverse lists and maps, perform repeated tasks, and process sequences of elements.
c. Infinite recursion occurs when the recursive calls in a function never reach a base case or a condition that would terminate the recursion. This may lead to stack overflow error or exhaust system resources.
d. A recursive helper method is a secondary function used in recursion to handle additional parameters or to perform preparatory steps.

R13.2 Smallest value

findSmallestValue(ArrayList arr)
if arr has only one element
    return arr[0]
SmallestOfRest = findSmallest(arr exclude the first element)
    if Array[0] < SmallestOfRest Then
        return Array[0]
    else
        return SmallestOfRest

R13.4 Sort array of numbers

sort(inputArray, sortedArray(initially empty)):
    If inputArray is empty
        return sortedArray

    smallestElement = findSmallestElement(InputArray)
    Add smallestElement to sortedArray
    remove smallestElement from inputArray
    return sort(inputArray, sortedArray)

//helper function
findSmallestElement(Array):
    SmallestElement = Array[0]
    for each Element in Array
        If Element < SmallestElement Then
            SmallestElement = Element
    return SmallestElement

R13.6 Exponents recursively

power(x, n):
    if n is 0 Then
        return 1
    else
        return x * power(x, n - 1)

if n = 0: x^n = 1
if n > 0: x^n = x * x^(n-1)

This function effectively computes the power of a number by multiplying the base number, x, by itself n times. The recursion depth is directly proportional to the value of n.

R13.8 Factorial recursively

factorial(n):
    if n is 0 or n is 1 Then
        return 1
    else
        return n * factorial(n - 1)

If n=0 or n=1, then n!=1.
If n>1, then n!=n×(n−1)!.

R19.1 operations on Stream<String>

a.long startsWithA = stream
      .filter(s -> s.startsWith("a") || s.startsWith("A"))
      .count();
b.long longStartsWithA = stream
      .filter(s -> s.length() > 10 && (s.startsWith("a") || s.startsWith("A")))
      .count();
c.boolean countStartsWithA = stream
      .filter(s -> s.startsWith("a") || s.startsWith("A"))
      .limit(100)
      .count() == 100;

R19.3 How to read Java8

words.filter(w -> w.length() > 10).limit(100).count()
Process: First, this expression filters the words stream to include only words with a length greater than 10. Then, it limits the resulting stream to the first 100 elements (after filtering). Finally, it counts the number of elements in this limited stream.
Result: The result will be 100 words that are longer than 10 characters. If there are fewer than 100 words that satisfy the length condition, it will count all that satisfy the condition.

words.limit(100).filter(w -> w.length() > 10).count()
Process: This expression first limits the words stream to the first 100 words, regardless of their length. Then, it filters these 100 words to include only those with a length greater than 10. Finally, it counts the number of elements in this filtered subset.
Result: The result is the count of words that are longer than 10 characters among the first 100 words of the stream. It may not contain as many as 100 elements.

R19.6 Transforming values

//convert double to string:
Stream<Double> doubleStream;
Stream<String> stringStream = doubleStream.map(Object::toString);

//convert string to double:
Stream<String> stringStream;
Stream<Double> doubleStream = stringStream.map(Double::parseDouble);

R19.11 Terminal operations

collect()
toArray()
reduce()
sum()
average()
min() and max()
count()
findFirst()
findAny()
foreach()
anyMatch()
allMatch()
noneMatch()
distinct()
filter()
generate()
limit()
map mapToDouble, mapToInt, mapToLong
parallel()
skip()
sorted()

R19.12 Collectors

averagingDouble, averagingInt, averagingLong counting groupingBy joining maxBy minBy summingDouble, summingInt, summingLong toList toSet


